@page "/incident"
@page "/incident/{Id}"
@using IncidentReporter.Shared
@inject IUriHelper UriHelper
@inject HttpClient Http

<h2>Viewing Incident: @Id</h2>

<form method="post">
    <div class="form-group">
        <label for="date">Date</label>
        <input type="datetime" id="date" bind="@incident.Date" class="form-control" />
    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <input type="text" id="summary" bind="@incident.Summary" class="form-control" />
    </div>
    <div class="form-group">
        <label for="impact">Impact</label>
        <input type="text" id="impact" bind="@incident.Impact" Class="form-control" />
    </div>

    @for (var i = 0; i < rootCauses.Count; i++)
    {
        <RootCause RootCauses="@rootCauses" Index="@i" />
    }
    <button type="button" class="btn btn-secondary" onclick="@AddRootCause">Add root cause</button>

    <div class="form-group">
        <label for="trigger">Trigger</label>
        <input type="text" id="trigger" bind="@incident.Trigger" class="form-control" />
    </div>
    <div class="form-group">
        <label for="resolution">Resolution</label>
        <input type="text" id="resolution" bind="@incident.Resolution" class="form-control" />
    </div>
    <div class="form-group">
        <label for="detection">Detection</label>
        <input type="text" id="detection" bind="@incident.Detection" class="form-control" />
    </div>
    <div class="form-group">
        <label for="actions-taken"></label>
    </div>
    <div class="form-group">
        <label for="work-items"></label>
    </div>
    <div class="form-group">
        <label for="lessons-learned"></label>
    </div>
    <button class="btn btn-primary" type="button" onclick="@Submit">Submit</button>
</form>


@functions {
    [Parameter]
    private string Id { get; set; }

    private Incident incident = new Incident();
    private List<string> rootCauses = new List<string>();

    protected override async Task OnInitAsync()
    {
        if (Id != null)
        {
            incident = await Http.GetJsonAsync<Incident>($"api/Incident/{Id}");
            if (incident.RootCauses != null)
            {
                rootCauses = incident.RootCauses;
            }
        }
        else
        {
            incident = new Incident
            {
                Id = DateTime.Now.ToString("ddMMyyhhmm"),
                Date = DateTime.Now
            };
            Id = incident.Id;
        }
    }

    private async Task Submit()
    {
        incident.RootCauses = rootCauses;
        await Http.SendJsonAsync(HttpMethod.Post, @"api/Incident", incident);
        UriHelper.NavigateTo("/");
    }

    private void AddRootCause()
    {
        rootCauses.Add("");
    }
}