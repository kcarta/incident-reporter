@using IncidentReporter.Shared
@using System.Timers
@inject IJSRuntime JSRuntime

<table class="table table-borderless actions-taken-table">
    <thead>
        <tr>
            <th class="w-auto">Timestamp</th>
            <th class="w-50">Description</th>
            <th class="w-auto"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var actionTaken in Actions)
        {
            <tr>
                <td>
                    <div class="form-group"><input type="datetime" bind="@actionTaken.Timestamp" class="form-control" /></div>
                </td>
                <td>
                    <div class="form-group"><input type="text" bind="@actionTaken.Description" class="form-control" /></div>
                </td>
                <td>
                    <button type="button" class="btn btn-outline-secondary" onclick="@(() => Remove(actionTaken))"><span class="oi oi-x" title="Remove" aria-hidden="true"></span></button>
                </td>
            </tr>
        }
        <tr>
            <td>
                <div class="form-group"><input type="datetime" bind="@DummyAction.Timestamp)" readonly class="form-control-plaintext" /></div>
            </td>
            <td>
                <div class="form-group"><input type="text" bind="@DummyAction.Description" onfocusout="@Add" class="form-control" id="dummy-action-input" /></div>
            </td>
            <td>
                <button type="button" class="btn btn-outline-secondary invisible"><span class="oi oi-x" title="Remove" aria-hidden="true"></span></button>
            </td>
        </tr>
    </tbody>
</table>

@functions {
    [Parameter]
    private List<ActionTaken> Actions { get; set; }

    private ActionTaken DummyAction { get; set; } = new ActionTaken { Timestamp = DateTime.Now };

    private async Task Add()
    {
        if (string.IsNullOrWhiteSpace(DummyAction.Description))
        {
            return;
        }
        var newAction = new ActionTaken
        {
            Id = Guid.NewGuid(),
            Timestamp = DummyAction.Timestamp,
            Description = DummyAction.Description
        };
        Actions.Add(newAction);
        DummyAction = new ActionTaken { Timestamp = DateTime.Now };
        await JSRuntime.InvokeAsync<string>("SetFocusInDummyAction");
    }

    private void Remove(ActionTaken actionTaken)
    {
        Actions.RemoveAll((action) => action.Id == actionTaken.Id);
    }

    protected override void OnInit()
    {
        var timer = new Timer();
        timer.Elapsed += (sender, args) =>
        {
            DummyAction.Timestamp = DateTime.Now;
            this.StateHasChanged();
        };
        timer.Interval = TimeSpan.FromSeconds(1).TotalSeconds;
        timer.AutoReset = true;
        timer.Start();
    }
}